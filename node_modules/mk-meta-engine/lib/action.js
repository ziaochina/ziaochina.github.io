'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

exports.default = creator;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _mkAppLoader = require('mk-app-loader');

var _common = require('./common');

var common = _interopRequireWildcard(_common);

var _mkUtils = require('mk-utils');

var _mkUtils2 = _interopRequireDefault(_mkUtils);

var _immutable = require('immutable');

var _context = require('./context');

var _context2 = _interopRequireDefault(_context);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var appInstances = {};

var action = function action(option) {
	var _this = this;

	(0, _classCallCheck3.default)(this, action);

	this.config = function (_ref) {
		var metaHandlers = _ref.metaHandlers;

		_this.metaHandlers = metaHandlers;
	};

	this.initView = function (component, injections) {
		_this.component = component;
		_this.injections = injections;

		appInstances[component.props.appFullName] = {
			appName: component.props.appName,
			appQuery: component.props.appQuery,
			//app: config.getApps()[component.props.appName],
			instance: component
		};

		_this.metaHandlers && _this.metaHandlers['onInit'] && _this.metaHandlers['onInit']({ component: component, injections: injections });
	};

	this.unmount = function () {
		delete appInstances[_this.component.appFullName];
	};

	this.componentWillMount = function () {
		_this.metaHandlers && _this.metaHandlers['componentWillMount'] && _this.metaHandlers['componentWillMount'] != _this.componentWillMount && _this.metaHandlers['componentWillMount']();
	};

	this.componentDidMount = function () {
		_this.metaHandlers && _this.metaHandlers['componentDidMount'] && _this.metaHandlers['componentDidMount'] != _this.componentDidMount && _this.metaHandlers['componentDidMount']();
	};

	this.shouldComponentUpdate = function (nextProps, nextState) {
		_this.metaHandlers && _this.metaHandlers['shouldComponentUpdate'] && _this.metaHandlers['shouldComponentUpdate'] != _this.shouldComponentUpdate && _this.metaHandlers['shouldComponentUpdate'](nextProps, nextState);
	};

	this.componentWillReceiveProps = function (nextProps) {
		_this.metaHandlers && _this.metaHandlers['componentWillReceiveProps'] && _this.metaHandlers['componentWillReceiveProps'] != _this.componentWillReceiveProps && _this.metaHandlers['componentWillReceiveProps'](nextProps);
	};

	this.componentWillUpdate = function (nextProps, nextState) {
		_this.metaHandlers && _this.metaHandlers['componentWillUpdate'] && _this.metaHandlers['componentWillUpdate'] != _this.componentWillUpdate && _this.metaHandlers['componentWillUpdate'](nextProps, nextState);
	};

	this.componentDidCatch = function (error, info) {
		_this.metaHandlers && _this.metaHandlers['componentDidCatch'] && _this.metaHandlers['componentDidCatch'] != _this.componentDidCatch && _this.metaHandlers['componentDidCatch'](error, info);
	};

	this.componentWillUnmount = function () {
		_this.metaHandlers && _this.metaHandlers['componentWillUnmount'] && _this.metaHandlers['componentWillUnmount'] != _this.componentWillUnmount && _this.metaHandlers['componentWillUnmount']();
	};

	this.componentDidUpdate = function () {
		_this.metaHandlers && _this.metaHandlers['componentDidUpdate'] && _this.metaHandlers['componentDidUpdate'] != _this.componentDidUpdate && _this.metaHandlers['componentDidUpdate']();
	};

	this.getAppInstances = function () {
		return appInstances;
	};

	this.getField = function (fieldPath) {
		return common.getField(_this.injections.getState(), fieldPath);
	};

	this.getFields = function (fieldPaths) {
		return common.getFields(_this.injections.getState(), fieldPaths);
	};

	this.setField = function (fieldPath, value) {
		return _this.injections.reduce('setField', fieldPath, value);
	};

	this.setFields = function (values) {
		return _this.injections.reduce('setFields', values);
	};

	this.parseExpreesion = function (v) {
		if (!_this.cache.expression) _this.cache.expression = {};

		if (_this.cache.expression[v]) {
			return _this.cache.expression[v];
		}

		if (!_this.cache.expressionParams) {
			_this.cache.expressionParams = ['data'].concat((0, _keys2.default)(_this.metaHandlers).map(function (k) {
				return "$" + k;
			})).concat(['_path', '_rowIndex', '_vars', '_ctrlPath', '_lastIndex']);
		}

		var params = _this.cache.expressionParams;

		var body = _mkUtils2.default.expression.getExpressionBody(v);

		_this.cache.expression[v] = new (Function.prototype.bind.apply(Function, [null].concat((0, _toConsumableArray3.default)(params), [body])))();
		return _this.cache.expression[v];
	};

	this.execExpression = function (expressContent, data, path, rowIndex, vars, ctrlPath) {
		var f = _this.parseExpreesion(expressContent);
		var values = [data];

		(0, _keys2.default)(_this.metaHandlers).forEach(function (k) {
			values.push(function () {
				var _metaHandlers;

				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
					args[_key] = arguments[_key];
				}

				return (_metaHandlers = _this.metaHandlers)[k].apply(_metaHandlers, args.concat([{ currentPath: path, rowIndex: rowIndex, vars: vars, lastIndex: vars && vars[vars.length - 1] }]));
			});
		});
		values = values.concat([path, rowIndex, vars, ctrlPath, vars && vars[vars.length - 1]]);
		try {
			return f.apply(_this, values);
		} catch (e) {
			_mkUtils2.default.exception.error(e);
		}
	};

	this.needUpdate = function (meta) {
		if (!meta) return false;

		var t = typeof meta === 'undefined' ? 'undefined' : (0, _typeof3.default)(meta);

		if (t == 'string' && _mkUtils2.default.expression.isExpression(meta)) return true;

		if (t != 'object') return false;

		if (meta["_notParse"] === true) {
			return false;
		}

		return !(t != 'object' || !!meta['$$typeof'] || !!meta['_isAMomentObject'] || !!meta["_power"] || meta["_visible"] === false);
	};

	this.updateMeta = function (meta, path, rowIndex, vars, data, ctrlPath) {

		if (!_this.needUpdate(meta)) return;

		if (meta instanceof Array) {
			for (var i = 0; i < meta.length; i++) {
				var sub = meta[i];
				var currentPath = path;
				if (!sub) continue;

				if (sub['_power']) {
					currentPath = path + '.' + sub.name;
					sub.path = vars ? currentPath + ', ' + vars.join(',') : currentPath;
					continue;
				}

				var subType = typeof sub === 'undefined' ? 'undefined' : (0, _typeof3.default)(sub),
				    isExpression = false,
				    isMeta = false;

				if (subType == 'string' && _mkUtils2.default.expression.isExpression(sub)) {
					sub = _this.execExpression(sub, data, path, rowIndex, vars, ctrlPath);
					isExpression = true;
					if (sub && sub['_isMeta'] === true) isMeta = true;

					if (sub && sub['_isMeta'] === true) {
						isMeta = true;
						meta[i] = sub.value;
					} else {
						meta[i] = sub;
					}
				}

				if (!_this.needUpdate(sub)) continue;

				if (isExpression && !isMeta) {
					continue;
				}

				subType = typeof sub === 'undefined' ? 'undefined' : (0, _typeof3.default)(sub);

				if (sub instanceof Array) {
					currentPath = path + '.' + i;
					sub.path = vars ? currentPath + ', ' + vars.join(',') : currentPath;
					_this.updateMeta(sub, currentPath, rowIndex, vars, data, ctrlPath);
					continue;
				}

				if (sub.name && sub.component) {
					currentPath = path + '.' + sub.name;
					sub.path = vars ? currentPath + ', ' + vars.join(',') : currentPath;
					_this.updateMeta(sub, currentPath, rowIndex, vars, data, sub.path);
				} else {
					currentPath = path + '.' + i;
					sub.path = vars ? currentPath + ', ' + vars.join(',') : currentPath;
					_this.updateMeta(sub, currentPath, rowIndex, vars, data, ctrlPath);
				}
			}
			return;
		}

		var excludeProps = meta["_excludeProps"];
		if (excludeProps && _mkUtils2.default.expression.isExpression(excludeProps)) {
			excludeProps = _this.execExpression(excludeProps, data, path, rowIndex, vars, ctrlPath);
		}

		//去除meta的排除属性
		if (excludeProps && excludeProps instanceof Array) {
			excludeProps.forEach(function (k) {
				if (meta[k]) delete meta[k];
			});
		}

		var keys = (0, _keys2.default)(meta);

		var _iteratorNormalCompletion = true;
		var _didIteratorError = false;
		var _iteratorError = undefined;

		try {
			var _loop = function _loop() {
				var key = _step.value;

				var v = meta[key],
				    t = typeof v === 'undefined' ? 'undefined' : (0, _typeof3.default)(v),
				    currentPath = path;

				if (!v) return 'continue';

				if (v['_power']) {
					currentPath = path + '.' + key + '.' + v.name;
					v.path = vars ? currentPath + ', ' + vars.join(',') : currentPath;
					return 'continue';
				}

				var isExpression = false,
				    isMeta = false;
				if (t == 'string' && _mkUtils2.default.expression.isExpression(v)) {
					v = _this.execExpression(v, data, path + '.' + key, rowIndex, vars, ctrlPath);
					isExpression = true;
					if (key == '...' && v && (typeof v === 'undefined' ? 'undefined' : (0, _typeof3.default)(v)) == 'object') {
						(0, _keys2.default)(v).forEach(function (kk) {
							meta[kk] = v[kk];
						});
						delete meta['...'];
					} else {
						if (v && v['_isMeta'] === true) {
							isMeta = true;
							meta[key] = v.value;
						} else {
							meta[key] = v;
						}
					}
				}

				t = typeof t === 'undefined' ? 'undefined' : (0, _typeof3.default)(t);

				if (!_this.needUpdate(v)) return 'continue';

				if (isExpression && !isMeta) {
					return 'continue';
				}

				if (v instanceof Array) {
					_this.updateMeta(v, path + '.' + key, rowIndex, vars, data, ctrlPath);
					return 'continue';
				}

				if (v.name && v.component) {
					currentPath = path + '.' + key + '.' + v.name;
					v.path = vars ? currentPath + ', ' + vars.join(',') : currentPath;
					_this.updateMeta(v, currentPath, rowIndex, vars, data, v.path);
				} else {
					currentPath = path + '.' + key;
					v.path = vars ? currentPath + ', ' + vars.join(',') : currentPath;
					_this.updateMeta(v, currentPath, rowIndex, vars, data, ctrlPath);
				}
			};

			for (var _iterator = (0, _getIterator3.default)(keys), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
				var _ret = _loop();

				if (_ret === 'continue') continue;
			}
		} catch (err) {
			_didIteratorError = true;
			_iteratorError = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion && _iterator.return) {
					_iterator.return();
				}
			} finally {
				if (_didIteratorError) {
					throw _iteratorError;
				}
			}
		}
	};

	this.getMeta = function (fullPath, propertys, data) {
		var meta = common.getMeta(_this.appInfo, fullPath, propertys),
		    parsedPath = _mkUtils2.default.path.parsePath(fullPath),
		    path = parsedPath.path,
		    rowIndex = parsedPath.vars ? parsedPath.vars[0] : undefined,
		    vars = parsedPath.vars;

		if (!data) data = common.getField(_this.injections.getState()).toJS();

		meta['_power'] = undefined;
		meta.path = fullPath;
		_this.updateMeta(meta, path, rowIndex, vars, data, fullPath);
		return meta;
	};

	this.setMetaForce = function (appName, meta) {
		common.setMetaForce(appName, meta);
	};

	this.focus = function (path) {
		if (_this.isFocus(path)) return false;
		_this.setField('data.other.focusFieldPath', path);
		return true;
	};

	this.focusByEvent = function (e) {
		var path = _mkUtils2.default.path.findPathByEvent(e);
		return _this.focus(path);
	};

	this.isFocus = function (path) {
		if (!path) return false;
		var focusFieldPath = _this.getField('data.other.focusFieldPath');
		if (!focusFieldPath) return false;
		return path.replace(/\s/g, '') == focusFieldPath.replace(/\s/g, '');
	};

	this.getDirectFuns = function () {
		return {
			getMeta: function getMeta() {
				return _this.getMeta.apply(_this, arguments);
			},
			getField: function getField(fieldPath) {
				return _this.getField(fieldPath);
			},
			gm: function gm() {
				return _this.getMeta.apply(_this, arguments);
			},
			gf: function gf(fieldPath) {
				return _this.getField(fieldPath);
			}
		};
	};

	this.toast = function () {
		for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
			args[_key2] = arguments[_key2];
		}

		var Toast = _config2.default.getToast();
		if (!Toast || args.length == 0 || !Toast[args[0]]) return;
		Toast[args[0]].apply(Toast, (0, _toConsumableArray3.default)(args.slice(1)));
	};

	this.notification = function () {
		for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
			args[_key3] = arguments[_key3];
		}

		var Notification = _config2.default.getNotification();
		if (!Notification || args.length == 0 || !Notification[args[0]]) return;
		Notification[args[0]].apply(Notification, (0, _toConsumableArray3.default)(args.slice(1)));
	};

	this.modal = function () {
		for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
			args[_key4] = arguments[_key4];
		}

		var Modal = _config2.default.getModal();
		if (!Modal || args.length == 0 || !Modal[args[0]]) return;
		return Modal[args[0]].apply(Modal, (0, _toConsumableArray3.default)(args.slice(1)));
	};

	this.loadApp = function (name, props) {
		return _react2.default.createElement(_mkAppLoader.AppLoader, (0, _extends3.default)({}, props, { name: name }));
	};

	this.gm = this.getMeta;
	this.gf = this.getField;
	this.gfs = this.getFields;
	this.sf = this.setField;
	this.sfs = this.setFields;
	this.findPathByEvent = _mkUtils2.default.path.findPathByEvent;
	this.stringToMoment = _mkUtils2.default.moment.stringToMoment;
	this.momentToString = _mkUtils2.default.moment.momentToString;
	this.fromJS = _immutable.fromJS;
	this.context = _context2.default;

	this.appInfo = option.appInfo;
	this.meta = (0, _immutable.fromJS)(option.appInfo.meta);
	this.cache = {};

	common.setMeta(option.appInfo);
};

function creator(option) {
	return new action(option);
}
module.exports = exports['default'];