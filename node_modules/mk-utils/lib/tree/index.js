"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getIterator2 = require("babel-runtime/core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function build() {
    var nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { id: 0 };

    if ((typeof root === "undefined" ? "undefined" : (0, _typeof3.default)(root)) != "object") {
        root = { id: root };
    }

    root.children = nodes.filter(function (n) {
        return n.parentId == root.id;
    }).map(function (c) {
        return build(nodes, c);
    });

    return root;
}

function find(nodes, childPropName, matchFn) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = (0, _getIterator3.default)(nodes), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var n = _step.value;

            if (matchFn(n) === true) {
                return n;
            }

            if (n[childPropName]) {
                var f = find(n[childPropName], childPropName, matchFn);
                if (f) return f;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return;
}

function map(nodes, childPropName, newChildPropName, mapFun) {
    var ret = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = (0, _getIterator3.default)(nodes), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var n = _step2.value;

            if (n[childPropName]) {
                n[newChildPropName || childPropName] = map(n[childPropName], childPropName, newChildPropName, mapFun);
                if (newChildPropName && newChildPropName != childPropName) delete n[childPropName];
            }
            ret.push(mapFun(n));
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    return ret;
}

exports.default = {
    build: build,
    find: find,
    map: map
};
module.exports = exports["default"];